type: edu
custom_name: stage4
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            () -> testAllQuizzes(0),

            () -> testCreateQuiz(0),
            () -> testQuizExists(0),
            () -> testQuizNotExists(0),

            () -> testAllQuizzes(1),

            () -> testCreateQuiz(1),
            () -> testQuizExists(1),
            () -> testQuizNotExists(1),

            () -> testAllQuizzes(2),

            () -> checkQuizSuccess(quizIds[0], "[0]", false),
            () -> checkQuizSuccess(quizIds[0], "[1]", false),
            () -> checkQuizSuccess(quizIds[0], "[2]", true),
            () -> checkQuizSuccess(quizIds[0], "[3]", false),

            () -> checkQuizSuccess(quizIds[1], "[0]", false),
            () -> checkQuizSuccess(quizIds[1], "[1]", true),
            () -> checkQuizSuccess(quizIds[1], "[2]", false),
            () -> checkQuizSuccess(quizIds[1], "[3]", false),

            () -> testAllQuizzes(2),
            this::reloadServer,
            () -> testAllQuizzes(2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true),
            () -> checkQuizSuccess(quizIds[0], "[3]", false),
            () -> checkQuizSuccess(quizIds[1], "[0]", false),
            () -> checkQuizSuccess(quizIds[1], "[1]", true),

            () -> addIncorrectQuiz(error400noTitle),
            () -> addIncorrectQuiz(error400emptyTitle),
            () -> addIncorrectQuiz(error400noText),
            () -> addIncorrectQuiz(error400emptyText),
            () -> addIncorrectQuiz(error400noOptions),
            () -> addIncorrectQuiz(error400emptyOptions),
            () -> addIncorrectQuiz(error400oneOption),

            () -> testCreateQuiz(2),
            () -> testQuizExists(2),
            () -> testQuizNotExists(2),
            () -> checkQuizSuccess(quizIds[2], "[]", false),
            () -> checkQuizSuccess(quizIds[2], "[0]", false),
            () -> checkQuizSuccess(quizIds[2], "[1]", false),
            () -> checkQuizSuccess(quizIds[2], "[2]", false),
            () -> checkQuizSuccess(quizIds[2], "[3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false),

            () -> testCreateQuiz(3),
            () -> testQuizExists(3),
            () -> testQuizNotExists(3),
            () -> checkQuizSuccess(quizIds[3], "[]", false),
            () -> checkQuizSuccess(quizIds[3], "[0]", false),
            () -> checkQuizSuccess(quizIds[3], "[1]", false),
            () -> checkQuizSuccess(quizIds[3], "[2]", false),
            () -> checkQuizSuccess(quizIds[3], "[3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false),

            () -> testCreateQuiz(4),
            () -> testQuizExists(4),
            () -> testQuizNotExists(4),
            () -> checkQuizSuccess(quizIds[4], "[]", true),
            () -> checkQuizSuccess(quizIds[4], "[0]", false),
            () -> checkQuizSuccess(quizIds[4], "[1]", false),
            () -> checkQuizSuccess(quizIds[4], "[2]", false),
            () -> checkQuizSuccess(quizIds[4], "[3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false),

            () -> testCreateQuiz(5),
            () -> testQuizExists(5),
            () -> testQuizNotExists(5),
            () -> checkQuizSuccess(quizIds[5], "[]", true),
            () -> checkQuizSuccess(quizIds[5], "[0]", false),
            () -> checkQuizSuccess(quizIds[5], "[1]", false),
            () -> checkQuizSuccess(quizIds[5], "[2]", false),
            () -> checkQuizSuccess(quizIds[5], "[3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false),

            () -> testCreateQuiz(6),
            () -> testQuizExists(6),
            () -> testQuizNotExists(6),
            () -> checkQuizSuccess(quizIds[6], "[]", false),
            () -> checkQuizSuccess(quizIds[6], "[0]", false),
            () -> checkQuizSuccess(quizIds[6], "[1]", false),
            () -> checkQuizSuccess(quizIds[6], "[2]", false),
            () -> checkQuizSuccess(quizIds[6], "[3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false),

            () -> testAllQuizzes(7),
            this::reloadServer,
            () -> testAllQuizzes(7),
            () -> checkQuizSuccess(quizIds[5], "[]", true),
            () -> checkQuizSuccess(quizIds[5], "[0]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true),
        };

        private CheckResult testCreateQuiz(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizzes[quizNum]).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + 125);
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count) {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quiz).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/ResponseQuiz.java
  visible: true
  text: |
    package engine;

    public class ResponseQuiz {
        private boolean success;
        private String feedback;

        public ResponseQuiz (boolean success, String feedback) {
            this.success = success;
            this.feedback = feedback;
        }

        public boolean getSuccess() {
            return success;
        }
        public String getFeedback() {
            return feedback;
        }
    }
  learner_created: true
- name: src/engine/Answer.java
  visible: true
  learner_created: true
- name: src/engine/Quiz.java
  visible: true
  text: |
    package engine;

    public class Quiz {
        private String title;
        private String text;
        private String[] options;

        public Quiz (String title, String text, String[] options) {
            this.title = title;
            this.text = text;
            this.options = options;
        }

        public String getTitle() {
            return title;
        }

        public String getText() {
            return text;
        }

        public String[] getOptions() {
            return options;
        }
    }
  learner_created: true
- name: src/engine/QuizRestController.java
  visible: true
  text: |
    package engine;

    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    import org.springframework.web.bind.annotation.RestController;


    @RestController
    public class QuizRestController {
        @GetMapping("/api/quiz")
        public Quiz getQuiz() {
            String[] options = new String[] {"Robot","Tea leaf","Cup of coffee","Bug"};

            return new Quiz("The Java Logo", "What is depicted on the Java logo?", options);
        }

        @PostMapping("/api/quiz")
        public ResponseQuiz checkAnswerQuiz(@RequestParam int answer) {
            if (answer == 2) {
                return new ResponseQuiz(true, "Congratulations, you're right!");
            } else {
                return new ResponseQuiz(false, "Wrong answer! Please, try again.");
            }
        }
    }
  learner_created: true
- name: src/engine/QuizNotFound.java
  visible: true
  learner_created: true
- name: src/engine/QuizRepository.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/507/implement#comment
status: Failed
feedback:
  message: "Unexpected error in test #19\n\nWe have recorded this bug and will fix\
    \ it soon.\n\nSubmitted via IDE\n\nOS Mac OS X\nJava 11.0.10\nVendor AdoptOpenJDK\n\
    Testing library version 8\n\norg.hyperskill.hstest.exception.outcomes.UnexpectedError:\
    \ Cannot stop Spring application, port is not freed\n\tat org.hyperskill.hstest.stage.SpringTest.stopSpring(SpringTest.java:165)\n\
    \tat org.hyperskill.hstest.stage.SpringTest.reloadSpring(SpringTest.java:171)\n\
    \tat tests.WebQuizEngineTest.reloadServer(WebQuizEngineTest.java:405)\n\tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$null$2(DynamicTesting.java:281)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$null$0(DynamicTesting.java:244)\n\
    \tat org.hyperskill.hstest.testing.runner.SpringApplicationRunner.test(SpringApplicationRunner.java:43)\n\
    \tat org.hyperskill.hstest.testing.TestRun.test(TestRun.java:87)\n\tat org.hyperskill.hstest.stage.StageTest.start(StageTest.java:110)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\
    \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\
    \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\
    \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\
    \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\
    \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\
    \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\
    \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\
    \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\
    \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\
    \tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\
    \tat org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:40)\n\
    \tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\n\
    \tat java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)\n\tat java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\n\
    \tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\
    \tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)\n\
    \tat org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)\n\
    \tat org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:71)\n\
    \tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)\n\
    \tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)\n\
    \tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)\n\
    \tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)\n\
    \tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)\n\
    \tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\n\
    \tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\n\
    \tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\n\
    \tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\
    \tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\n\
    \tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n\
    \tat com.sun.proxy.$Proxy2.stop(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:133)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n\
    \tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\n\
    \tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)\n\
    \tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\n\
    \tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\
    \tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:834)\n\nPlease find below the\
    \ output of your program during this failed test.\n\n---\n\n\n  .   ____     \
    \     _            __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n\
    ( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)|\
    \ | | | | || (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /\n\
    \ =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v2.2.2.RELEASE)\n\
    \n2021-04-16 09:37:58.276  INFO 43034 --- [    Test worker] engine.WebQuizEngine\
    \                     : Starting WebQuizEngine on CAB-WSM-0012018 with PID 43034\
    \ (started by a19023522 in /Users/a19023522/Intership/Hyper_skill/Web Quiz Engine/task)\n\
    2021-04-16 09:37:58.279  INFO 43034 --- [    Test worker] engine.WebQuizEngine\
    \                     : No active profile set, falling back to default profiles:\
    \ default\n2021-04-16 09:37:59.231  INFO 43034 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate\
    \ : Bootstrapping Spring Data JPA repositories in DEFAULT mode.\n2021-04-16 09:37:59.278\
    \  INFO 43034 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate :\
    \ Finished Spring Data repository scanning in 38ms. Found 1 JPA repository interfaces.\n\
    2021-04-16 09:37:59.586  INFO 43034 --- [    Test worker] trationDelegate$BeanPostProcessorChecker\
    \ : Bean &#39;org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration&#39;\
    \ of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration]\
    \ is not eligible for getting processed by all BeanPostProcessors (for example:\
    \ not eligible for auto-proxying)\n2021-04-16 09:37:59.817  INFO 43034 --- [ \
    \   Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized\
    \ with port(s): 8889 (http)\n2021-04-16 09:37:59.827  INFO 43034 --- [    Test\
    \ worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n\
    2021-04-16 09:37:59.828  INFO 43034 --- [    Test worker] org.apache.catalina.core.StandardEngine\
    \  : Starting Servlet engine: [Apache Tomcat/9.0.29]\n2021-04-16 09:37:59.973\
    \  INFO 43034 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       :\
    \ Initializing Spring embedded WebApplicationContext\n2021-04-16 09:37:59.973\
    \  INFO 43034 --- [    Test worker] o.s.web.context.ContextLoader            :\
    \ Root WebApplicationContext: initialization completed in 1653 ms\n2021-04-16\
    \ 09:38:00.103  INFO 43034 --- [    Test worker] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Starting...\n2021-04-16 09:38:00.373  INFO 43034 ---\
    \ [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 -\
    \ Start completed.\n2021-04-16 09:38:00.381  INFO 43034 --- [    Test worker]\
    \ o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at &#39;/h2-console&#39;.\
    \ Database available at &#39;jdbc:h2:file:../quizdb&#39;\n2021-04-16 09:38:00.615\
    \  INFO 43034 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  :\
    \ HHH000204: Processing PersistenceUnitInfo [name: default]\n2021-04-16 09:38:00.717\
    \  INFO 43034 --- [    Test worker] org.hibernate.Version                    :\
    \ HHH000412: Hibernate Core {5.4.9.Final}\n2021-04-16 09:38:00.859  INFO 43034\
    \ --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001:\
    \ Hibernate Commons Annotations {5.1.0.Final}\n2021-04-16 09:38:00.982  INFO 43034\
    \ --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400:\
    \ Using dialect: org.hibernate.dialect.H2Dialect\n2021-04-16 09:38:01.612  INFO\
    \ 43034 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490:\
    \ Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\n\
    2021-04-16 09:38:01.618  INFO 43034 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean\
    \ : Initialized JPA EntityManagerFactory for persistence unit &#39;default&#39;\n\
    2021-04-16 09:38:01.838  WARN 43034 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration\
    \ : spring.jpa.open-in-view is enabled by default. Therefore, database queries\
    \ may be performed during view rendering. Explicitly configure spring.jpa.open-in-view\
    \ to disable this warning\n2021-04-16 09:38:01.968  INFO 43034 --- [    Test worker]\
    \ o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;\n\
    2021-04-16 09:38:02.177  INFO 43034 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver\
    \      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;\n2021-04-16\
    \ 09:38:02.228  INFO 43034 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer\
    \  : Tomcat started on port(s): 8889 (http) with context path &#39;&#39;\n2021-04-16\
    \ 09:38:02.231  INFO 43034 --- [    Test worker] engine.WebQuizEngine        \
    \             : Started WebQuizEngine in 4.309 seconds (JVM running for 5.128)\n\
    2021-04-16 09:38:02.533  INFO 43034 --- [nio-8889-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]\
    \       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;\n\
    2021-04-16 09:38:02.534  INFO 43034 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet\
    \        : Initializing Servlet &#39;dispatcherServlet&#39;\n2021-04-16 09:38:02.541\
    \  INFO 43034 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        :\
    \ Completed initialization in 6 ms\nfalse\nfalse\n2021-04-16 09:38:03.533  INFO\
    \ 43034 --- [       Thread-6] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting\
    \ down ExecutorService &#39;applicationTaskExecutor&#39;\n2021-04-16 09:38:03.534\
    \  INFO 43034 --- [       Thread-6] j.LocalContainerEntityManagerFactoryBean :\
    \ Closing JPA EntityManagerFactory for persistence unit &#39;default&#39;\n2021-04-16\
    \ 09:38:03.537  INFO 43034 --- [       Thread-6] com.zaxxer.hikari.HikariDataSource\
    \       : HikariPool-1 - Shutdown initiated...\n2021-04-16 09:38:03.733  INFO\
    \ 43034 --- [       Thread-6] com.zaxxer.hikari.HikariDataSource       : HikariPool-1\
    \ - Shutdown completed."
  time: Fri, 16 Apr 2021 06:38:14 UTC
record: -1
